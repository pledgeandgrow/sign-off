-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  action text NOT NULL,
  resource_type text NOT NULL CHECK (resource_type = ANY (ARRAY['vault'::text, 'vault_item'::text, 'inheritance_plan'::text, 'heir'::text, 'user'::text, 'shared_vault'::text])),
  resource_id uuid,
  ip_address inet,
  user_agent text,
  old_values jsonb,
  new_values jsonb,
  risk_level text CHECK (risk_level = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.heir_vault_access (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  heir_id uuid NOT NULL,
  vault_id uuid,
  vault_item_id uuid,
  can_view boolean DEFAULT true,
  can_export boolean DEFAULT false,
  can_edit boolean DEFAULT false,
  reencrypted_key text,
  granted_at timestamp with time zone NOT NULL DEFAULT now(),
  accessed_at timestamp with time zone,
  CONSTRAINT heir_vault_access_pkey PRIMARY KEY (id),
  CONSTRAINT heir_vault_access_heir_id_fkey FOREIGN KEY (heir_id) REFERENCES public.heirs(id),
  CONSTRAINT heir_vault_access_vault_id_fkey FOREIGN KEY (vault_id) REFERENCES public.vaults(id),
  CONSTRAINT heir_vault_access_vault_item_id_fkey FOREIGN KEY (vault_item_id) REFERENCES public.vault_items(id)
);
CREATE TABLE public.heirs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  inheritance_plan_id uuid,
  full_name_encrypted text NOT NULL,
  email_encrypted text NOT NULL,
  phone_encrypted text,
  relationship_encrypted text,
  access_level USER-DEFINED NOT NULL,
  heir_user_id uuid,
  heir_public_key text,
  notify_on_activation boolean DEFAULT true,
  notification_delay_days integer DEFAULT 0 CHECK (notification_delay_days >= 0),
  is_active boolean DEFAULT true,
  has_accepted boolean DEFAULT false,
  accepted_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT heirs_pkey PRIMARY KEY (id),
  CONSTRAINT heirs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT heirs_inheritance_plan_id_fkey FOREIGN KEY (inheritance_plan_id) REFERENCES public.inheritance_plans(id),
  CONSTRAINT heirs_heir_user_id_fkey FOREIGN KEY (heir_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.inheritance_plans (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  plan_name text NOT NULL,
  plan_type USER-DEFINED NOT NULL,
  is_active boolean DEFAULT true,
  is_triggered boolean DEFAULT false,
  triggered_at timestamp with time zone,
  instructions_encrypted text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT inheritance_plans_pkey PRIMARY KEY (id),
  CONSTRAINT inheritance_plans_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.inheritance_triggers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  inheritance_plan_id uuid NOT NULL,
  user_id uuid NOT NULL,
  trigger_reason USER-DEFINED NOT NULL,
  trigger_metadata jsonb,
  status USER-DEFINED NOT NULL DEFAULT 'pending'::trigger_status_type,
  requires_verification boolean DEFAULT true,
  verification_code text,
  verified_at timestamp with time zone,
  verified_by uuid,
  triggered_at timestamp with time zone NOT NULL DEFAULT now(),
  completed_at timestamp with time zone,
  cancelled_at timestamp with time zone,
  CONSTRAINT inheritance_triggers_pkey PRIMARY KEY (id),
  CONSTRAINT inheritance_triggers_inheritance_plan_id_fkey FOREIGN KEY (inheritance_plan_id) REFERENCES public.inheritance_plans(id),
  CONSTRAINT inheritance_triggers_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT inheritance_triggers_verified_by_fkey FOREIGN KEY (verified_by) REFERENCES public.users(id)
);
CREATE TABLE public.password_breach_checks (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  vault_item_id uuid NOT NULL,
  user_id uuid NOT NULL,
  is_breached boolean NOT NULL,
  breach_count integer DEFAULT 0,
  checked_at timestamp with time zone NOT NULL DEFAULT now(),
  last_notified_at timestamp with time zone,
  CONSTRAINT password_breach_checks_pkey PRIMARY KEY (id),
  CONSTRAINT password_breach_checks_vault_item_id_fkey FOREIGN KEY (vault_item_id) REFERENCES public.vault_items(id),
  CONSTRAINT password_breach_checks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.payment_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  subscription_id uuid,
  square_event_id text NOT NULL UNIQUE,
  event_type text NOT NULL,
  event_data jsonb NOT NULL,
  processed boolean DEFAULT false,
  processed_at timestamp with time zone,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT payment_events_pkey PRIMARY KEY (id),
  CONSTRAINT payment_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT payment_events_subscription_id_fkey FOREIGN KEY (subscription_id) REFERENCES public.subscriptions(id)
);
CREATE TABLE public.private_key_recovery (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  encrypted_private_key text NOT NULL,
  recovery_method text NOT NULL CHECK (recovery_method = ANY (ARRAY['passphrase'::text, 'security_questions'::text, 'backup_codes'::text])),
  recovery_hint text,
  failed_attempts integer DEFAULT 0,
  locked_until timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone,
  last_accessed timestamp with time zone,
  CONSTRAINT private_key_recovery_pkey PRIMARY KEY (id),
  CONSTRAINT private_key_recovery_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.security_alerts (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  alert_type USER-DEFINED NOT NULL,
  severity USER-DEFINED NOT NULL,
  title text NOT NULL,
  description text,
  is_resolved boolean DEFAULT false,
  resolved_at timestamp with time zone,
  metadata jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT security_alerts_pkey PRIMARY KEY (id),
  CONSTRAINT security_alerts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.shared_vaults (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  vault_id uuid NOT NULL,
  owner_id uuid NOT NULL,
  shared_with_user_id uuid NOT NULL,
  can_view boolean DEFAULT true,
  can_edit boolean DEFAULT false,
  can_delete boolean DEFAULT false,
  can_share boolean DEFAULT false,
  shared_key_encrypted text NOT NULL,
  is_active boolean DEFAULT true,
  accepted boolean DEFAULT false,
  accepted_at timestamp with time zone,
  shared_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone,
  CONSTRAINT shared_vaults_pkey PRIMARY KEY (id),
  CONSTRAINT shared_vaults_vault_id_fkey FOREIGN KEY (vault_id) REFERENCES public.vaults(id),
  CONSTRAINT shared_vaults_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES public.users(id),
  CONSTRAINT shared_vaults_shared_with_user_id_fkey FOREIGN KEY (shared_with_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  square_subscription_id text UNIQUE,
  square_customer_id text,
  plan_name text NOT NULL DEFAULT 'Premium'::text,
  amount numeric DEFAULT 10.00,
  currency text DEFAULT 'EUR'::text,
  status text NOT NULL CHECK (status = ANY (ARRAY['active'::text, 'cancelled'::text, 'past_due'::text, 'paused'::text])),
  current_period_start timestamp with time zone,
  current_period_end timestamp with time zone,
  cancelled_at timestamp with time zone,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.two_factor_auth (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  method USER-DEFINED NOT NULL,
  secret_encrypted text,
  backup_codes_encrypted ARRAY,
  is_enabled boolean DEFAULT true,
  is_verified boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  verified_at timestamp with time zone,
  last_used_at timestamp with time zone,
  CONSTRAINT two_factor_auth_pkey PRIMARY KEY (id),
  CONSTRAINT two_factor_auth_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_activity (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  activity_type text NOT NULL,
  ip_address text,
  user_agent text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_activity_pkey PRIMARY KEY (id),
  CONSTRAINT user_activity_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_sessions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  session_token text NOT NULL UNIQUE,
  device_name text,
  device_type text,
  ip_address inet,
  user_agent text,
  location_city text,
  location_country text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  last_activity timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  CONSTRAINT user_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text),
  full_name text,
  avatar_url text,
  public_key text,
  emergency_contact_email text,
  emergency_contact_phone text,
  is_active boolean DEFAULT true,
  account_locked boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  last_login timestamp with time zone,
  email_verified boolean DEFAULT false,
  subscription_tier text DEFAULT 'free'::text CHECK (subscription_tier = ANY (ARRAY['free'::text, 'premium'::text])),
  subscription_status text DEFAULT 'inactive'::text CHECK (subscription_status = ANY (ARRAY['active'::text, 'inactive'::text, 'cancelled'::text, 'past_due'::text])),
  subscription_expires_at timestamp with time zone,
  global_trigger_method text DEFAULT 'inactivity'::text CHECK (global_trigger_method = ANY (ARRAY['inactivity'::text, 'death_certificate'::text, 'manual_trigger'::text, 'scheduled'::text])),
  global_trigger_settings jsonb DEFAULT '{"inactivity_days": 30}'::jsonb,
  global_scheduled_date timestamp with time zone,
  trusted_contact_email text,
  trusted_contact_phone text,
  last_activity timestamp with time zone DEFAULT now(),
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.vault_items (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  vault_id uuid NOT NULL,
  user_id uuid NOT NULL,
  item_type USER-DEFINED NOT NULL,
  storage_path text NOT NULL UNIQUE,
  storage_bucket text NOT NULL DEFAULT 'vault-items'::text,
  file_size bigint,
  title_encrypted text NOT NULL,
  tags ARRAY,
  is_favorite boolean DEFAULT false,
  password_strength integer CHECK (password_strength IS NULL OR password_strength >= 0 AND password_strength <= 100),
  password_last_changed timestamp with time zone,
  requires_password_change boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  last_accessed timestamp with time zone,
  CONSTRAINT vault_items_pkey PRIMARY KEY (id),
  CONSTRAINT vault_items_vault_id_fkey FOREIGN KEY (vault_id) REFERENCES public.vaults(id),
  CONSTRAINT vault_items_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.vaults (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  category USER-DEFINED NOT NULL,
  icon text,
  color text,
  settings jsonb DEFAULT '{"autoLock": true, "autoLockTimeout": 15, "twoFactorEnabled": false, "maxFailedAttempts": 5}'::jsonb,
  access_control jsonb DEFAULT '{"allowedHeirs": [], "allowedUsers": [], "requireApproval": true}'::jsonb,
  death_settings jsonb DEFAULT '{"notifySMS": [], "notifyEmail": [], "instructions": "", "notifyContacts": true, "triggerAfterDays": 30}'::jsonb,
  is_encrypted boolean DEFAULT false,
  is_locked boolean DEFAULT false,
  is_shared boolean DEFAULT false,
  is_favorite boolean DEFAULT false,
  tags ARRAY,
  sort_order integer DEFAULT 0 CHECK (sort_order >= 0),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  last_accessed timestamp with time zone,
  CONSTRAINT vaults_pkey PRIMARY KEY (id),
  CONSTRAINT vaults_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);